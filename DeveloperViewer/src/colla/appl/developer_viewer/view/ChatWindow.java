/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatWindow.java
 *
 * Created on 14/03/2012, 20:05:01
 */
package colla.appl.developer_viewer.view;

import colla.kernel.util.TimeAndDate;
import colla.appl.developer_viewer.DeveloperViewerController;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import colla.kernel.impl.*;
import java.awt.event.KeyEvent;
import org.openide.awt.TabbedPaneFactory;

/**
 * ChatWindow extends JFrame and contains a JTabbedPane were messages can be displayed
 * in a tab which the tittle is the name of the sender of the message.
 * It needs a list of User (contacts) to get the connection data
 * 
 * @author dmatos88 at gmail.com
 */
public class ChatWindow extends javax.swing.JInternalFrame {

    /** Creates new form ChatWindow */
    public ChatWindow(String serverIp, int serverPort, String clientName, DeveloperViewerController viewer) {
        super("CollA - Chat", true, true, true, true);
        initComponents();
        this.devViewer = viewer;
        //this.setIconImage(new ImageIcon(getClass().getResource("/cliente2/imagens/login_fundo.jpg")).getImage());
        userName = clientName;
        time = new TimeAndDate();
        contactsMap = new HashMap<String, String>();
        JobChat jobChat = new JobChat();
        devViewer.addJob(jobChat);
        
        jTabbedPane_conversations.addPropertyChangeListener(TabbedPaneFactory.PROP_CLOSE, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                JTabbedPane pane = (JTabbedPane) evt.getSource();
                int tabIndex = pane.getSelectedIndex();
                pane.removeTabAt(tabIndex);
            }
        });
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    public ChatWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new colla.kernel.util.ImagePane(BackGround.INVERSE_DENSE_GREEN.getPath());
        jTabbedPane_conversations = TabbedPaneFactory.createCloseButtonTabbedPane();
        jPanel2 = new colla.kernel.util.ImagePane(BackGround.DENSE_GREEN.getPath());
        jButton_cleanInput = new javax.swing.JButton();
        jButton_submit = new javax.swing.JButton();
        jCheckBox_submitWithEnter = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_inputMessage = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();

        setMinimumSize(new java.awt.Dimension(643, 353));

        jPanel1.setBackground(new java.awt.Color(234, 235, 237));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane_conversations, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane_conversations, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(234, 235, 237));

        jButton_cleanInput.setBackground(java.awt.Color.white);
        jButton_cleanInput.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        jButton_cleanInput.setText(org.openide.util.NbBundle.getMessage(ChatWindow.class, "ChatWindow.jButton_cleanInput.text")); // NOI18N
        jButton_cleanInput.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_cleanInputMouseClicked(evt);
            }
        });

        jButton_submit.setBackground(java.awt.Color.white);
        jButton_submit.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        jButton_submit.setText(org.openide.util.NbBundle.getMessage(ChatWindow.class, "ChatWindow.jButton_submit.text")); // NOI18N
        jButton_submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton_submitMouseClicked(evt);
            }
        });

        jCheckBox_submitWithEnter.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jCheckBox_submitWithEnter.setForeground(java.awt.Color.black);
        jCheckBox_submitWithEnter.setSelected(true);
        jCheckBox_submitWithEnter.setText(org.openide.util.NbBundle.getMessage(ChatWindow.class, "ChatWindow.jCheckBox_submitWithEnter.text")); // NOI18N

        jTextArea_inputMessage.setColumns(20);
        jTextArea_inputMessage.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jTextArea_inputMessage.setLineWrap(true);
        jTextArea_inputMessage.setRows(5);
        jTextArea_inputMessage.setText(org.openide.util.NbBundle.getMessage(ChatWindow.class, "ChatWindow.jTextArea_inputMessage.text")); // NOI18N
        jTextArea_inputMessage.setWrapStyleWord(true);
        jTextArea_inputMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea_inputMessageKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextArea_inputMessageKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea_inputMessageKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea_inputMessage);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_cleanInput, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_submit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_submitWithEnter))
                .addGap(135, 135, 135))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox_submitWithEnter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(jButton_submit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_cleanInput))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton_cleanInput, jButton_submit});

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, 0, 641, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_submitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_submitMouseClicked
        if (evt.getButton() == evt.BUTTON1) {
            int tabIndex = jTabbedPane_conversations.getSelectedIndex();
            if (tabIndex >= 0) {
                String contactName = jTabbedPane_conversations.getTitleAt(tabIndex);
                String message = jTextArea_inputMessage.getText();
                if (message.length() > 0) {
                    jTextArea_inputMessage.setText("");
                    sendMessage(contactName, message);
                }

            }
        }
    }//GEN-LAST:event_jButton_submitMouseClicked

    private void jTextArea_inputMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_inputMessageKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && jCheckBox_submitWithEnter.isSelected()) {
            int tabIndex = jTabbedPane_conversations.getSelectedIndex();
            if (tabIndex >= 0) {
                String contactName = jTabbedPane_conversations.getTitleAt(tabIndex);
                String message = jTextArea_inputMessage.getText();
                if (message.length() > 0) {
                    jTextArea_inputMessage.setText("");
                    sendMessage(contactName, message);
                }
            }
        }
    }//GEN-LAST:event_jTextArea_inputMessageKeyTyped

    private void jTextArea_inputMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_inputMessageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && jCheckBox_submitWithEnter.isSelected()) {
            int tabIndex = jTabbedPane_conversations.getSelectedIndex();
            if (tabIndex >= 0) {
                String contactName = jTabbedPane_conversations.getTitleAt(tabIndex);
                String message = jTextArea_inputMessage.getText();
                if (message.length() > 0) {
                    jTextArea_inputMessage.setText("");
                    sendMessage(contactName, message);
                }
            }
        }

    }//GEN-LAST:event_jTextArea_inputMessageKeyPressed

    private void jTextArea_inputMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea_inputMessageKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && jCheckBox_submitWithEnter.isSelected()) {
            jTextArea_inputMessage.setText("");
            jTextArea_inputMessage.setCaretPosition(0);
        }
    }//GEN-LAST:event_jTextArea_inputMessageKeyReleased

    private void jButton_cleanInputMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton_cleanInputMouseClicked
        jTextArea_inputMessage.setText("");
    }//GEN-LAST:event_jButton_cleanInputMouseClicked

    /**
     * show the message received in a tab with the sender nickname
     * as tittle
     * @param sender nickname of sender
     * @param message message to show on tab of sender
     */
    public void showMessage(String sender, String message) {
        Integer tabCounter = jTabbedPane_conversations.getTabCount();
        int tabIndex = -1;
        //loop to check if there's already a tab for this sender 
        for (int i = 0; i < tabCounter; i++) {
            if (jTabbedPane_conversations.getTitleAt(i).equals(sender)) {
                tabIndex = i;
            }
        }
        //if the tab already exists
        if (tabIndex >= 0) {
            appendMessage(tabIndex, sender, message);
        } else {
            JTextPane textPane = new JTextPane();
            textPane.setEditable(false);
            textPane.setAutoscrolls(true);
            jTabbedPane_conversations.addTab(sender, new JScrollPane(textPane));
            appendMessage(tabCounter, sender, message);
        }
        if (!this.isVisible()) {
            this.setVisible(true);
        }
    }

    /**
     * append or displays a message in a given tab index of a JTabbedPane
     * 
     * @param tabIndex the index of the tab where the message will be displayed
     * @param sender the nickname of the sender
     * @param message the message to be displayed
     */
    public void appendMessage(int tabIndex, String sender, String message) {
        if (message != null && message.length() > 0) {
            JScrollPane scrollPane = (JScrollPane) jTabbedPane_conversations.getComponentAt(tabIndex);
            JTextPane messageRecords = (JTextPane) scrollPane.getViewport().getComponent(0);;
            StyledDocument doc = messageRecords.getStyledDocument();
            SimpleAttributeSet remetenteAttr = new SimpleAttributeSet();
            SimpleAttributeSet horario = new SimpleAttributeSet();
            if (sender.equals("me")) {
                StyleConstants.setForeground(remetenteAttr, Color.DARK_GRAY);
            } else {
                StyleConstants.setForeground(remetenteAttr, Color.BLUE);
            }
            StyleConstants.setLeftIndent(remetenteAttr, 20);
            SimpleAttributeSet msgAttr = new SimpleAttributeSet();
            StyleConstants.setForeground(msgAttr, Color.BLACK);
            StyleConstants.setForeground(horario, Color.LIGHT_GRAY);
            StyleConstants.setFontFamily(msgAttr, "sansserif");
            StyleConstants.setFontFamily(horario, "sansserif");
            StyleConstants.setFontFamily(remetenteAttr, "sansserif");
            StyleConstants.setFontSize(msgAttr, 14);
            StyleConstants.setFontSize(horario, 14);
            StyleConstants.setFontSize(remetenteAttr, 14);
            try {
                doc.insertString(doc.getLength(), " " + time.getHour(), horario);
                doc.insertString(doc.getLength(), " " + sender + ": ", remetenteAttr);
                doc.insertString(doc.getLength(), message + "\n", msgAttr);
                messageRecords.setCaretPosition(doc.getLength());
            } catch (BadLocationException ble) {
                ble.printStackTrace();
            }
        }
    }

    /**
     * removes a contact from contactsMap
     * 
     * @param contactName contact to remove
     */
    public void removeContact(String contactName) {
        if (contactsMap.containsKey(contactName)) {
            contactsMap.remove(contactName);
        }
    }

    /**
     * put a contact in contactsMap
     * 
     * @param  userName name of the contact
     * @param group group of the contact
     */
    public void addContact(String userName, String group) {
        contactsMap.put(userName, group);
    }

    /**
     * initializes the maps of contacts with the initial contacts
     * 
     * @param contactsList a map containing the list of contacts
     */
    public void setContactsList(HashMap<String, String> contactsList) {
        contactsMap = contactsList;
    }

    /**
     * 
     * @param contactName the name of the contact
     * @return if there's a contact with the given contactName 
     */
    public boolean containsContact(String contactName) {
        return contactsMap.containsKey(contactName);
    }

    /**
     * try to estabilish connection with a contact if it has a valid IP, otherwise
     * try to estabilish connection with the server to transmit the message
     * @param contactName the name of the contact that will receive the message
     * @param message  
     */
    public void sendMessage(String contactName, String message) {
        if (this.devViewer.sendChatMessage(contactName, message, this.contactsMap.get(contactName))) {
            appendMessage(jTabbedPane_conversations.getSelectedIndex(), "me", message);
        } else {
            message = "I'm not online now.";
            appendMessage(jTabbedPane_conversations.getSelectedIndex(), contactName, message);
        }
    }
    private DeveloperViewerController devViewer;
    private String userName;
    final private int timeout = 40000;
    private Map<String, String> contactsMap; //key: name of contact, value: group to which contact belongs
    private TimeAndDate time;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_cleanInput;
    private javax.swing.JButton jButton_submit;
    private javax.swing.JCheckBox jCheckBox_submitWithEnter;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane_conversations;
    private javax.swing.JTextArea jTextArea_inputMessage;
    // End of variables declaration//GEN-END:variables
}
