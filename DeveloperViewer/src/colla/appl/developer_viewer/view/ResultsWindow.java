/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultsWindow.java
 *
 * Created on 13/05/2012, 13:36:34
 */
package colla.appl.developer_viewer.view;

import colla.appl.developer_viewer.DeveloperViewerController;
import colla.appl.developer_viewer.exceptions.DeveloperControllerInitializationException;
import colla.kernel.api.CollATask;
import colla.kernel.api.CollATicket;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Point;
import java.io.*;
import java.nio.channels.FileChannel;
import java.util.HashMap;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.text.html.HTML;
import org.openide.util.Exceptions;

/**
 * 
 * @author dmatos
 */
public class ResultsWindow extends javax.swing.JInternalFrame {

	/**
	 * Creates new form ResultsWindow
	 */
	public ResultsWindow() throws DeveloperControllerInitializationException {

		super("Results", true, true, true, true);

		initComponents();

		DeveloperViewerController devViewer = DeveloperViewerController
				.getInstance();
		DefaultListModel<String> model = new DefaultListModel<String>();
		jList_tasks.setModel(model);
		jList_tasks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		this.setDefaultCloseOperation(HIDE_ON_CLOSE);

		DefaultComboBoxModel<String> comboModel = new DefaultComboBoxModel<String>();
		jComboBox_resultGroups.setModel(comboModel);
	}

	public void setListOfTasks(
			HashMap<String, HashMap<String, CollATask>> taskList) {
		try {
			jTextPane_taskInfo.getDocument().insertString(0, "", null);
		} catch (BadLocationException ex) {
			Exceptions.printStackTrace(ex);
		}
		DefaultListModel<String> model = (DefaultListModel<String>) this.jList_tasks
				.getModel();
		model.removeAllElements();
		DefaultComboBoxModel<String> comboModel = (DefaultComboBoxModel<String>) jComboBox_resultGroups
				.getModel();
		comboModel.removeAllElements();
		for (String group : taskList.keySet()) {
			if (group != null && group.length() > 2) {
				comboModel.addElement(group);
			}
		}
		if (comboModel.getSize() > 0) {
			jComboBox_resultGroups.setSelectedIndex(0);
			String firstGroup = (String) comboModel.getSelectedItem();
			for (String task : taskList.get(firstGroup).keySet()) {
				if (!model.contains(task)) {
					model.addElement(task);
				}
			}
		}
		this.repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel1 = new colla.kernel.util.ImagePane(
				BackGround.DENSE_GREEN.getPath());
		jSplitPane1 = new javax.swing.JSplitPane();
		jScrollPane1 = new javax.swing.JScrollPane();
		jList_tasks = new javax.swing.JList<String>();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextPane_taskInfo = new javax.swing.JTextPane();
		jComboBox_resultGroups = new javax.swing.JComboBox<String>();

		setResizable(true);
		setTitle(org.openide.util.NbBundle.getMessage(ResultsWindow.class,
				"ResultsWindow.title")); // NOI18N

		jSplitPane1.setDividerLocation(150);
		jSplitPane1.setCursor(new java.awt.Cursor(
				java.awt.Cursor.DEFAULT_CURSOR));

		jList_tasks.setBorder(javax.swing.BorderFactory.createTitledBorder(
				null, org.openide.util.NbBundle.getMessage(ResultsWindow.class,
						"ResultsWindow.jList_tasks.border.title"),
				javax.swing.border.TitledBorder.LEFT,
				javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
		jList_tasks.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
		jList_tasks.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jList_tasksMouseClicked(evt);
			}
		});
		jScrollPane1.setViewportView(jList_tasks);

		jSplitPane1.setLeftComponent(jScrollPane1);

		jTextPane_taskInfo.setEditable(false);
		jTextPane_taskInfo.setBorder(javax.swing.BorderFactory
				.createTitledBorder(org.openide.util.NbBundle.getMessage(
						ResultsWindow.class,
						"ResultsWindow.jTextPane_taskInfo.border.title"))); // NOI18N
		jTextPane_taskInfo.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jTextPane_taskInfoMouseClicked(evt);
			}
		});
		jTextPane_taskInfo
				.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
					public void mouseMoved(java.awt.event.MouseEvent evt) {
						jTextPane_taskInfoMouseMoved(evt);
					}
				});
		jScrollPane3.setViewportView(jTextPane_taskInfo);

		jSplitPane1.setRightComponent(jScrollPane3);

		jComboBox_resultGroups.setBackground(java.awt.Color.white);
		jComboBox_resultGroups.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
		jComboBox_resultGroups.setBorder(javax.swing.BorderFactory
				.createTitledBorder(org.openide.util.NbBundle.getMessage(
						ResultsWindow.class,
						"ResultsWindow.jComboBox_resultGroups.border.title"))); // NOI18N
		jComboBox_resultGroups
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						jComboBox_resultGroupsActionPerformed(evt);
					}
				});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jSplitPane1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																533,
																Short.MAX_VALUE)
														.addComponent(
																jComboBox_resultGroups,
																0,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addContainerGap()));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(
												jComboBox_resultGroups,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												60,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												jSplitPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												243, Short.MAX_VALUE)
										.addContainerGap(18, Short.MAX_VALUE)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void jComboBox_resultGroupsActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jComboBox_resultGroupsActionPerformed
		DefaultComboBoxModel<String> comboModel = (DefaultComboBoxModel<String>) jComboBox_resultGroups
				.getModel();
		String group = (String) comboModel.getSelectedItem();
		if (group != null) {
			updateResults();
		}
	}// GEN-LAST:event_jComboBox_resultGroupsActionPerformed

	private void jList_tasksMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jList_tasksMouseClicked
		DefaultComboBoxModel<String> comboModel = (DefaultComboBoxModel<String>) jComboBox_resultGroups
				.getModel();
		String group = (String) comboModel.getSelectedItem();
		DefaultListModel model = (DefaultListModel) this.jList_tasks.getModel();
		int listIndex = jList_tasks.getSelectedIndex();
		if (listIndex > -1 && model.getElementAt(listIndex) != null) {
			String taskName = (String) model.getElementAt(listIndex);
			showResult(group, taskName);
		}
	}// GEN-LAST:event_jList_tasksMouseClicked

	private void jTextPane_taskInfoMouseMoved(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTextPane_taskInfoMouseMoved
		Point pt = new Point(evt.getX(), evt.getY());
		int pos = jTextPane_taskInfo.viewToModel(pt);
		Document doc = jTextPane_taskInfo.getDocument();
		if (doc instanceof DefaultStyledDocument) {
			DefaultStyledDocument hdoc = (DefaultStyledDocument) doc;
			Element e = hdoc.getCharacterElement(pos);
			AttributeSet attr = e.getAttributes();
			String[] href = (String[]) attr.getAttribute(HTML.Attribute.HREF);
			String[] data = (String[]) attr.getAttribute(HTML.Attribute.DATA);
			String[] archive = (String[]) attr
					.getAttribute(HTML.Attribute.ARCHIVE);
			String[] code = (String[]) attr.getAttribute(HTML.Attribute.CODE);
			if (href != null || data != null || archive != null || code != null) {
				jTextPane_taskInfo.setCursor(Cursor
						.getPredefinedCursor(Cursor.HAND_CURSOR));
			} else {
				jTextPane_taskInfo.setCursor(Cursor
						.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
			}
		}
	}// GEN-LAST:event_jTextPane_taskInfoMouseMoved

	private void jTextPane_taskInfoMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTextPane_taskInfoMouseClicked
		Point pt = new Point(evt.getX(), evt.getY());
		int pos = jTextPane_taskInfo.viewToModel(pt);
		Document doc = jTextPane_taskInfo.getDocument();
		String groupName;
		String taskName;
		try {
			DeveloperViewerController devViewer = DeveloperViewerController
					.getInstance();

			if (doc instanceof DefaultStyledDocument) {
				DefaultStyledDocument hdoc = (DefaultStyledDocument) doc;
				Element e = hdoc.getCharacterElement(pos);
				AttributeSet attr = e.getAttributes();
				String[] archive = (String[]) attr
						.getAttribute(HTML.Attribute.ARCHIVE);
				String[] href = (String[]) attr
						.getAttribute(HTML.Attribute.HREF);
				String[] data = (String[]) attr
						.getAttribute(HTML.Attribute.DATA);
				String[] code = (String[]) attr
						.getAttribute(HTML.Attribute.CODE);
				if (code != null) {
					groupName = code[0];
					taskName = code[1];
					int cancelTask = JOptionPane
							.showConfirmDialog(
									this,
									"Are you sure that you want abort this task?",
									"Abort Task " + taskName,
									JOptionPane.YES_NO_OPTION);
					if (cancelTask == JOptionPane.YES_OPTION) {
						devViewer.cancelScheduledTask(groupName, taskName);
						this.updateResults();
					}
				} else if (href != null) {
					groupName = href[0];
					taskName = href[1];
					File file;
					try {
						file = devViewer.getTaskResult(groupName, taskName)
								.getFileFromResult();
						this.openFileResult(file);
					} catch (Exception ex) {
						Exceptions.printStackTrace(ex);
					}
				} else if (data != null) {
					groupName = data[0];
					taskName = data[1];
					Object result = devViewer
							.getTaskResult(groupName, taskName);
					this.saveNonFileResult(result);
				} else if (archive != null) {
					groupName = archive[0];
					taskName = archive[1];
					CollATicket ticket = devViewer.getTaskResult(groupName,
							taskName).getTicket();
					if (!devViewer.downloadResult(ticket, groupName)) {
						JOptionPane.showMessageDialog(this,
								"Erro: couldn't download result", "Error",
								JOptionPane.ERROR_MESSAGE);
					} else {
						this.showResult(groupName, taskName);
					}

				}
			}
		} catch (DeveloperControllerInitializationException devEx) {
			// devEx.printStackTrace();
		}
	}// GEN-LAST:event_jTextPane_taskInfoMouseClicked

	public void updateResults() {
		try {
			DeveloperViewerController devViewer = DeveloperViewerController
					.getInstance();
			jTextPane_taskInfo.getDocument().insertString(0, "", null);

			DefaultListModel<String> model = (DefaultListModel<String>) this.jList_tasks
					.getModel();
			model.removeAllElements();
			DefaultComboBoxModel<String> comboModel = (DefaultComboBoxModel<String>) jComboBox_resultGroups
					.getModel();
			String group = (String) comboModel.getSelectedItem();
			if (group != null) {
				HashMap<String, HashMap<String, CollATask>> tasksByGroup = devViewer
						.getTasks();
				for (String task : tasksByGroup.get(group).keySet()) {
					model.addElement(task);
				}
			}
			if (model.isEmpty()) {
				this.jTextPane_taskInfo.setText("");
			}
		} catch (BadLocationException ex) {
			Exceptions.printStackTrace(ex);
		} catch (DeveloperControllerInitializationException devEx) {
			// devEx.printStackTrace();
		}
		this.repaint();
	}

	public void showResult(String groupName, String taskName) {
		try {
			DeveloperViewerController devViewer = DeveloperViewerController
					.getInstance();

			CollATask result = devViewer.getTaskResult(groupName, taskName);

			StyledDocument doc = this.jTextPane_taskInfo.getStyledDocument();
			SimpleAttributeSet infoAttr = new SimpleAttributeSet();
			SimpleAttributeSet msgAttr = new SimpleAttributeSet();
			StyleConstants.setForeground(msgAttr, Color.BLACK);
			StyleConstants.setForeground(infoAttr, Color.BLUE);
			StyleConstants.setFontFamily(msgAttr, "sansserif");
			StyleConstants.setFontFamily(infoAttr, "sansserif");
			StyleConstants.setFontSize(msgAttr, 14);
			StyleConstants.setFontSize(infoAttr, 14);

			String[] groupAndTask = new String[2];
			groupAndTask[0] = groupName;
			groupAndTask[1] = taskName;

			// insert link to save file
			MutableAttributeSet fileLink = new SimpleAttributeSet();
			fileLink.addAttribute(HTML.Attribute.HREF, groupAndTask);
			StyleConstants.setUnderline(fileLink, true);
			StyleConstants.setForeground(fileLink, Color.BLUE);
			StyleConstants.setFontFamily(fileLink, "sansserif");
			StyleConstants.setFontSize(fileLink, 14);

			// insert link to save object
			MutableAttributeSet objectLink = new SimpleAttributeSet();
			objectLink.addAttribute(HTML.Attribute.DATA, groupAndTask);
			StyleConstants.setUnderline(objectLink, true);
			StyleConstants.setForeground(objectLink, Color.BLUE);
			StyleConstants.setFontFamily(objectLink, "sansserif");
			StyleConstants.setFontSize(objectLink, 14);

			// insert link to download file from host
			MutableAttributeSet downloadFileLink = new SimpleAttributeSet();
			downloadFileLink.addAttribute(HTML.Attribute.ARCHIVE, groupAndTask);
			StyleConstants.setUnderline(downloadFileLink, true);
			StyleConstants.setForeground(downloadFileLink, Color.BLUE);
			StyleConstants.setFontFamily(downloadFileLink, "sansserif");
			StyleConstants.setFontSize(downloadFileLink, 14);

			// insert link to cancel a scheduled task
			MutableAttributeSet cancelScheduleLink = new SimpleAttributeSet();
			cancelScheduleLink.addAttribute(HTML.Attribute.CODE, groupAndTask);
			StyleConstants.setUnderline(cancelScheduleLink, true);
			StyleConstants.setForeground(cancelScheduleLink, Color.BLUE);
			StyleConstants.setFontFamily(cancelScheduleLink, "sansserif");
			StyleConstants.setFontSize(cancelScheduleLink, 14);

			try {
				doc.remove(0, doc.getLength());
				doc.insertString(doc.getLength(), "Task: ", infoAttr);
				doc.insertString(doc.getLength(), result.getTaskName()
						+ " sent by " + result.getOwner() + "\n", msgAttr);
				doc.insertString(doc.getLength(), "Class: ", infoAttr);
				doc.insertString(doc.getLength(), result.getClassToExecute()
						+ "\n", msgAttr);
				doc.insertString(doc.getLength(), "Method: ", infoAttr);
				doc.insertString(doc.getLength(), result.getMethodToExecute()
						+ "\n", msgAttr);
				doc.insertString(doc.getLength(), "Started : ", infoAttr);
				doc.insertString(doc.getLength(), result.getInitialTime()
						+ "\n", msgAttr);
				doc.insertString(doc.getLength(), "Finished : ", infoAttr);
				doc.insertString(doc.getLength(), result.getFinalTime() + "\n",
						msgAttr);
				doc.insertString(doc.getLength(), "Total time: ", infoAttr);
				doc.insertString(doc.getLength(), result.getTotalTime() + "\n",
						msgAttr);
				doc.insertString(doc.getLength(), "Result: ", infoAttr);
				if (result.hasTicket()) {
					doc.insertString(doc.getLength(), result.getResult()
							.toString()
							+ " (click here to download the result)\n",
							downloadFileLink);
				} else if (result.getResult() instanceof File) {
					doc.insertString(doc.getLength(), result.getResult()
							.toString()
							+ " (click here to save and open the file)\n",
							fileLink);
				} else {
					if (result.isFinished()) {
						doc.insertString(
								doc.getLength(),
								result.getResult().toString()
										+ " (click here to save the object to a file)\n",
								objectLink);
					} else {
						if (result.hasSchedule()) {
							// @todo remover a task de todas as listas se for
							// cancelada (como se nunca houvesse existido)
							// @todo ao clicar, deve-se perguntar ao usuario se
							// realmente deseja cancelar a task
							doc.insertString(doc.getLength(), "Schedule: "
									+ result.getSchedule().toString()
									+ " (click here to cancel schedule)\n",
									cancelScheduleLink);
						} else {
							doc.insertString(doc.getLength(), result
									.getResult().toString(), msgAttr);
						}
					}
				}
				this.jTextPane_taskInfo.setCaretPosition(doc.getLength());
			} catch (BadLocationException ble) {
				// ble.printStackTrace();
			}
		} catch (DeveloperControllerInitializationException ex) {
			// Exceptions.printStackTrace(ex);
		}
		this.repaint();
	}

	public void selectAndShowResult(String groupName, String taskName) {
		try {
			DeveloperViewerController devViewer = DeveloperViewerController
					.getInstance();
			jComboBox_resultGroups.setSelectedItem(groupName);
			DefaultListModel model = (DefaultListModel) jList_tasks.getModel();
			int taskIndex = model.indexOf(taskName);
			CollATask result = devViewer.getTaskResult(groupName, taskName);
			jList_tasks.setSelectedIndex(taskIndex);
			this.showResult(groupName, taskName);
			this.repaint();
			this.setVisible(true);
		} catch (DeveloperControllerInitializationException ex) {
			Exceptions.printStackTrace(ex);
		}
	}

	private void openFileResult(File temp) {
		Desktop desktop;
		// uncomment the line below to debug if Desktop is supported
		// System.err.println("desktop suported: "+Desktop.isDesktopSupported());
		File file = this.copyFile(temp, this.directory);
		if (file != null && Desktop.isDesktopSupported()) {
			desktop = Desktop.getDesktop();
			try {
				// System.err.println("opening file: " +
				// file.getAbsolutePath().toString());
				desktop.open(file);
			} catch (IOException ex) {
				Exceptions.printStackTrace(ex);
			}
		}
		temp.delete();
	}

	private void saveNonFileResult(Object result) {
		if (result instanceof Serializable) {
			String filename = (String) JOptionPane.showInputDialog(this,
					"Save oject as:", result.toString());
			if (filename != null) {
				File dir = new File(this.objectDir);
				dir.mkdirs();
				File file = new File(dir, filename);
				try {
					file.createNewFile();
					FileOutputStream f_out = new FileOutputStream(file);
					ObjectOutputStream output = new ObjectOutputStream(f_out);
					output.writeObject(result);
					output.flush();
					output.close();
					f_out.close();
				} catch (FileNotFoundException ex) {
					Exceptions.printStackTrace(ex);
				} catch (IOException ex) {
					Exceptions.printStackTrace(ex);
				}
			}
		} else {
			JOptionPane.showMessageDialog(this,
					"Result doesn't implement Serializable and can't be save.",
					"Error", JOptionPane.ERROR_MESSAGE);
		}
	}

	/**
	 * Copy a file form a directory to another and return the new File
	 * 
	 * @param temp
	 * @param directory
	 * @return file in its new path.
	 */
	private File copyFile(File temp, String directory) {
		new File(directory).mkdir();
		String filename = (String) JOptionPane.showInputDialog(this,
				"Save file as:",
				temp.getName().substring(0, temp.getName().lastIndexOf('.')));
		if (filename != null) {
			File file = new File(directory, filename
					+ temp.getName().substring(temp.getName().lastIndexOf('.'),
							temp.getName().length()));
			try {
				if (!file.exists()) {
					file.createNewFile();
				} else {
					int count = 1;
					while ((file = new File(directory, count + "_"
							+ temp.getName())).exists()) {
						count++;
					}
					file.createNewFile();
				}
				// Creates channel at origin
				FileChannel oriChannel = new FileInputStream(temp.getName())
						.getChannel();
				// Creates channel at destiny
				FileChannel destChannel = new FileOutputStream(file
						.getAbsolutePath().toString()).getChannel();
				// Copies data from origin to destiny
				destChannel.transferFrom(oriChannel, 0, oriChannel.size());
				oriChannel.close();
				destChannel.close();
			} catch (FileNotFoundException ex) {
				Exceptions.printStackTrace(ex);
			} catch (IOException io) {
				Exceptions.printStackTrace(io);
			}
			return file;
		}
		return null;
	}

	public void setResultsDir(String dir) {
		this.directory = dir;
	}

	public void setNonFileResultDir(String dir) {
		this.objectDir = dir;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JComboBox<String> jComboBox_resultGroups;
	private javax.swing.JList<String> jList_tasks;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JTextPane jTextPane_taskInfo;
	// End of variables declaration//GEN-END:variables
	private String directory;
	private String objectDir;
}
